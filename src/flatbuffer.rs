// automatically generated by the FlatBuffers compiler, do not modify

#![allow(
    unused_imports,
    clippy::extra_unused_lifetimes,
    clippy::derivable_impls,
    clippy::needless_lifetimes
)]

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod hex_flatbuffer {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_PACKET_DATA: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_PACKET_DATA: u8 = 7;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_PACKET_DATA: [PacketData; 8] = [
        PacketData::NONE,
        PacketData::TryPut,
        PacketData::PutSuccess,
        PacketData::TryGet,
        PacketData::GetSuccess,
        PacketData::TryDelete,
        PacketData::DeleteSuccess,
        PacketData::ErrorResponse,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct PacketData(pub u8);
    #[allow(non_upper_case_globals)]
    impl PacketData {
        pub const NONE: Self = Self(0);
        pub const TryPut: Self = Self(1);
        pub const PutSuccess: Self = Self(2);
        pub const TryGet: Self = Self(3);
        pub const GetSuccess: Self = Self(4);
        pub const TryDelete: Self = Self(5);
        pub const DeleteSuccess: Self = Self(6);
        pub const ErrorResponse: Self = Self(7);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 7;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::NONE,
            Self::TryPut,
            Self::PutSuccess,
            Self::TryGet,
            Self::GetSuccess,
            Self::TryDelete,
            Self::DeleteSuccess,
            Self::ErrorResponse,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::NONE => Some("NONE"),
                Self::TryPut => Some("TryPut"),
                Self::PutSuccess => Some("PutSuccess"),
                Self::TryGet => Some("TryGet"),
                Self::GetSuccess => Some("GetSuccess"),
                Self::TryDelete => Some("TryDelete"),
                Self::DeleteSuccess => Some("DeleteSuccess"),
                Self::ErrorResponse => Some("ErrorResponse"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for PacketData {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for PacketData {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for PacketData {
        type Output = PacketData;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<u8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for PacketData {
        type Scalar = u8;
        #[inline]
        fn to_little_endian(self) -> u8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: u8) -> Self {
            let b = u8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for PacketData {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for PacketData {}
    pub struct PacketDataUnionTableOffset {}

    // struct FlatbufferMoment, aligned to 1
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct FlatbufferMoment(pub [u8; 255]);
    impl Default for FlatbufferMoment {
        fn default() -> Self {
            Self([0; 255])
        }
    }
    impl core::fmt::Debug for FlatbufferMoment {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            f.debug_struct("FlatbufferMoment")
                .field("d", &self.d())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for FlatbufferMoment {}
    impl<'a> flatbuffers::Follow<'a> for FlatbufferMoment {
        type Inner = &'a FlatbufferMoment;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a FlatbufferMoment>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a FlatbufferMoment {
        type Inner = &'a FlatbufferMoment;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<FlatbufferMoment>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for FlatbufferMoment {
        type Output = FlatbufferMoment;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            let src = ::core::slice::from_raw_parts(
                self as *const FlatbufferMoment as *const u8,
                Self::size(),
            );
            dst.copy_from_slice(src);
        }
    }

    impl<'a> flatbuffers::Verifiable for FlatbufferMoment {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }

    impl<'a> FlatbufferMoment {
        #[allow(clippy::too_many_arguments)]
        pub fn new(d: &[u8; 255]) -> Self {
            let mut s = Self([0; 255]);
            s.set_d(d);
            s
        }

        pub fn d(&'a self) -> flatbuffers::Array<'a, u8, 255> {
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid array in this slot
            unsafe { flatbuffers::Array::follow(&self.0, 0) }
        }

        pub fn set_d(&mut self, items: &[u8; 255]) {
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid array in this slot
            unsafe { flatbuffers::emplace_scalar_array(&mut self.0, 0, items) };
        }
    }

    pub enum TryPutOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct TryPut<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for TryPut<'a> {
        type Inner = TryPut<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> TryPut<'a> {
        pub const VT_PATTERN: flatbuffers::VOffsetT = 4;
        pub const VT_NBT: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            TryPut { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args TryPutArgs<'args>,
        ) -> flatbuffers::WIPOffset<TryPut<'bldr>> {
            let mut builder = TryPutBuilder::new(_fbb);
            if let Some(x) = args.nbt {
                builder.add_nbt(x);
            }
            if let Some(x) = args.pattern {
                builder.add_pattern(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn pattern(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(TryPut::VT_PATTERN, None)
            }
        }
        #[inline]
        pub fn nbt(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        TryPut::VT_NBT,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for TryPut<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "pattern",
                    Self::VT_PATTERN,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "nbt",
                    Self::VT_NBT,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct TryPutArgs<'a> {
        pub pattern: Option<flatbuffers::WIPOffset<&'a str>>,
        pub nbt: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for TryPutArgs<'a> {
        #[inline]
        fn default() -> Self {
            TryPutArgs {
                pattern: None,
                nbt: None,
            }
        }
    }

    pub struct TryPutBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> TryPutBuilder<'a, 'b> {
        #[inline]
        pub fn add_pattern(&mut self, pattern: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(TryPut::VT_PATTERN, pattern);
        }
        #[inline]
        pub fn add_nbt(&mut self, nbt: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(TryPut::VT_NBT, nbt);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TryPutBuilder<'a, 'b> {
            let start = _fbb.start_table();
            TryPutBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<TryPut<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for TryPut<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("TryPut");
            ds.field("pattern", &self.pattern());
            ds.field("nbt", &self.nbt());
            ds.finish()
        }
    }
    pub enum PutSuccessOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct PutSuccess<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for PutSuccess<'a> {
        type Inner = PutSuccess<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> PutSuccess<'a> {
        pub const VT_PASSWORD: flatbuffers::VOffsetT = 4;
        pub const VT_SANATIZED_ENTITY: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            PutSuccess { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args PutSuccessArgs<'args>,
        ) -> flatbuffers::WIPOffset<PutSuccess<'bldr>> {
            let mut builder = PutSuccessBuilder::new(_fbb);
            if let Some(x) = args.password {
                builder.add_password(x);
            }
            builder.add_sanatized_entity(args.sanatized_entity);
            builder.finish()
        }

        #[inline]
        pub fn password(&self) -> Option<&'a FlatbufferMoment> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<FlatbufferMoment>(PutSuccess::VT_PASSWORD, None)
            }
        }
        #[inline]
        pub fn sanatized_entity(&self) -> bool {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<bool>(PutSuccess::VT_SANATIZED_ENTITY, Some(false))
                    .unwrap()
            }
        }
    }

    impl flatbuffers::Verifiable for PutSuccess<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<FlatbufferMoment>("password", Self::VT_PASSWORD, false)?
                .visit_field::<bool>("sanatized_entity", Self::VT_SANATIZED_ENTITY, false)?
                .finish();
            Ok(())
        }
    }
    pub struct PutSuccessArgs<'a> {
        pub password: Option<&'a FlatbufferMoment>,
        pub sanatized_entity: bool,
    }
    impl<'a> Default for PutSuccessArgs<'a> {
        #[inline]
        fn default() -> Self {
            PutSuccessArgs {
                password: None,
                sanatized_entity: false,
            }
        }
    }

    pub struct PutSuccessBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> PutSuccessBuilder<'a, 'b> {
        #[inline]
        pub fn add_password(&mut self, password: &FlatbufferMoment) {
            self.fbb_
                .push_slot_always::<&FlatbufferMoment>(PutSuccess::VT_PASSWORD, password);
        }
        #[inline]
        pub fn add_sanatized_entity(&mut self, sanatized_entity: bool) {
            self.fbb_
                .push_slot::<bool>(PutSuccess::VT_SANATIZED_ENTITY, sanatized_entity, false);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PutSuccessBuilder<'a, 'b> {
            let start = _fbb.start_table();
            PutSuccessBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<PutSuccess<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for PutSuccess<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("PutSuccess");
            ds.field("password", &self.password());
            ds.field("sanatized_entity", &self.sanatized_entity());
            ds.finish()
        }
    }
    pub enum TryGetOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct TryGet<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for TryGet<'a> {
        type Inner = TryGet<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> TryGet<'a> {
        pub const VT_PATTERN: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            TryGet { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args TryGetArgs<'args>,
        ) -> flatbuffers::WIPOffset<TryGet<'bldr>> {
            let mut builder = TryGetBuilder::new(_fbb);
            if let Some(x) = args.pattern {
                builder.add_pattern(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn pattern(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(TryGet::VT_PATTERN, None)
            }
        }
    }

    impl flatbuffers::Verifiable for TryGet<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "pattern",
                    Self::VT_PATTERN,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct TryGetArgs<'a> {
        pub pattern: Option<flatbuffers::WIPOffset<&'a str>>,
    }
    impl<'a> Default for TryGetArgs<'a> {
        #[inline]
        fn default() -> Self {
            TryGetArgs { pattern: None }
        }
    }

    pub struct TryGetBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> TryGetBuilder<'a, 'b> {
        #[inline]
        pub fn add_pattern(&mut self, pattern: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(TryGet::VT_PATTERN, pattern);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TryGetBuilder<'a, 'b> {
            let start = _fbb.start_table();
            TryGetBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<TryGet<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for TryGet<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("TryGet");
            ds.field("pattern", &self.pattern());
            ds.finish()
        }
    }
    pub enum GetSuccessOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct GetSuccess<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for GetSuccess<'a> {
        type Inner = GetSuccess<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> GetSuccess<'a> {
        pub const VT_NBT: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            GetSuccess { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args GetSuccessArgs<'args>,
        ) -> flatbuffers::WIPOffset<GetSuccess<'bldr>> {
            let mut builder = GetSuccessBuilder::new(_fbb);
            if let Some(x) = args.nbt {
                builder.add_nbt(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn nbt(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        GetSuccess::VT_NBT,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for GetSuccess<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "nbt",
                    Self::VT_NBT,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct GetSuccessArgs<'a> {
        pub nbt: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for GetSuccessArgs<'a> {
        #[inline]
        fn default() -> Self {
            GetSuccessArgs { nbt: None }
        }
    }

    pub struct GetSuccessBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> GetSuccessBuilder<'a, 'b> {
        #[inline]
        pub fn add_nbt(&mut self, nbt: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(GetSuccess::VT_NBT, nbt);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GetSuccessBuilder<'a, 'b> {
            let start = _fbb.start_table();
            GetSuccessBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<GetSuccess<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for GetSuccess<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("GetSuccess");
            ds.field("nbt", &self.nbt());
            ds.finish()
        }
    }
    pub enum TryDeleteOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct TryDelete<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for TryDelete<'a> {
        type Inner = TryDelete<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> TryDelete<'a> {
        pub const VT_PATTERN: flatbuffers::VOffsetT = 4;
        pub const VT_PASSWORD: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            TryDelete { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args TryDeleteArgs<'args>,
        ) -> flatbuffers::WIPOffset<TryDelete<'bldr>> {
            let mut builder = TryDeleteBuilder::new(_fbb);
            if let Some(x) = args.password {
                builder.add_password(x);
            }
            if let Some(x) = args.pattern {
                builder.add_pattern(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn pattern(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(TryDelete::VT_PATTERN, None)
            }
        }
        #[inline]
        pub fn password(&self) -> Option<&'a FlatbufferMoment> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<FlatbufferMoment>(TryDelete::VT_PASSWORD, None)
            }
        }
    }

    impl flatbuffers::Verifiable for TryDelete<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "pattern",
                    Self::VT_PATTERN,
                    false,
                )?
                .visit_field::<FlatbufferMoment>("password", Self::VT_PASSWORD, false)?
                .finish();
            Ok(())
        }
    }
    pub struct TryDeleteArgs<'a> {
        pub pattern: Option<flatbuffers::WIPOffset<&'a str>>,
        pub password: Option<&'a FlatbufferMoment>,
    }
    impl<'a> Default for TryDeleteArgs<'a> {
        #[inline]
        fn default() -> Self {
            TryDeleteArgs {
                pattern: None,
                password: None,
            }
        }
    }

    pub struct TryDeleteBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> TryDeleteBuilder<'a, 'b> {
        #[inline]
        pub fn add_pattern(&mut self, pattern: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(TryDelete::VT_PATTERN, pattern);
        }
        #[inline]
        pub fn add_password(&mut self, password: &FlatbufferMoment) {
            self.fbb_
                .push_slot_always::<&FlatbufferMoment>(TryDelete::VT_PASSWORD, password);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TryDeleteBuilder<'a, 'b> {
            let start = _fbb.start_table();
            TryDeleteBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<TryDelete<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for TryDelete<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("TryDelete");
            ds.field("pattern", &self.pattern());
            ds.field("password", &self.password());
            ds.finish()
        }
    }
    pub enum DeleteSuccessOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct DeleteSuccess<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for DeleteSuccess<'a> {
        type Inner = DeleteSuccess<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> DeleteSuccess<'a> {
        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            DeleteSuccess { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            _args: &'args DeleteSuccessArgs,
        ) -> flatbuffers::WIPOffset<DeleteSuccess<'bldr>> {
            let mut builder = DeleteSuccessBuilder::new(_fbb);
            builder.finish()
        }
    }

    impl flatbuffers::Verifiable for DeleteSuccess<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?.finish();
            Ok(())
        }
    }
    pub struct DeleteSuccessArgs {}
    impl<'a> Default for DeleteSuccessArgs {
        #[inline]
        fn default() -> Self {
            DeleteSuccessArgs {}
        }
    }

    pub struct DeleteSuccessBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> DeleteSuccessBuilder<'a, 'b> {
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> DeleteSuccessBuilder<'a, 'b> {
            let start = _fbb.start_table();
            DeleteSuccessBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<DeleteSuccess<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for DeleteSuccess<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("DeleteSuccess");
            ds.finish()
        }
    }
    pub enum ErrorResponseOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct ErrorResponse<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for ErrorResponse<'a> {
        type Inner = ErrorResponse<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> ErrorResponse<'a> {
        pub const VT_ID: flatbuffers::VOffsetT = 4;
        pub const VT_OTHER: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            ErrorResponse { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ErrorResponseArgs<'args>,
        ) -> flatbuffers::WIPOffset<ErrorResponse<'bldr>> {
            let mut builder = ErrorResponseBuilder::new(_fbb);
            if let Some(x) = args.other {
                builder.add_other(x);
            }
            builder.add_id(args.id);
            builder.finish()
        }

        #[inline]
        pub fn id(&self) -> u16 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u16>(ErrorResponse::VT_ID, Some(0)).unwrap() }
        }
        #[inline]
        pub fn other(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(ErrorResponse::VT_OTHER, None)
            }
        }
    }

    impl flatbuffers::Verifiable for ErrorResponse<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u16>("id", Self::VT_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("other", Self::VT_OTHER, false)?
                .finish();
            Ok(())
        }
    }
    pub struct ErrorResponseArgs<'a> {
        pub id: u16,
        pub other: Option<flatbuffers::WIPOffset<&'a str>>,
    }
    impl<'a> Default for ErrorResponseArgs<'a> {
        #[inline]
        fn default() -> Self {
            ErrorResponseArgs { id: 0, other: None }
        }
    }

    pub struct ErrorResponseBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ErrorResponseBuilder<'a, 'b> {
        #[inline]
        pub fn add_id(&mut self, id: u16) {
            self.fbb_.push_slot::<u16>(ErrorResponse::VT_ID, id, 0);
        }
        #[inline]
        pub fn add_other(&mut self, other: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(ErrorResponse::VT_OTHER, other);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> ErrorResponseBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ErrorResponseBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<ErrorResponse<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for ErrorResponse<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("ErrorResponse");
            ds.field("id", &self.id());
            ds.field("other", &self.other());
            ds.finish()
        }
    }
    pub enum PacketOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Packet<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Packet<'a> {
        type Inner = Packet<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Packet<'a> {
        pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 4;
        pub const VT_DATA: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Packet { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args PacketArgs,
        ) -> flatbuffers::WIPOffset<Packet<'bldr>> {
            let mut builder = PacketBuilder::new(_fbb);
            if let Some(x) = args.data {
                builder.add_data(x);
            }
            builder.add_data_type(args.data_type);
            builder.finish()
        }

        #[inline]
        pub fn data_type(&self) -> PacketData {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<PacketData>(Packet::VT_DATA_TYPE, Some(PacketData::NONE))
                    .unwrap()
            }
        }
        #[inline]
        pub fn data(&self) -> Option<flatbuffers::Table<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                        Packet::VT_DATA,
                        None,
                    )
            }
        }
        #[inline]
        #[allow(non_snake_case)]
        pub fn data_as_try_put(&self) -> Option<TryPut<'a>> {
            if self.data_type() == PacketData::TryPut {
                self.data().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { TryPut::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn data_as_put_success(&self) -> Option<PutSuccess<'a>> {
            if self.data_type() == PacketData::PutSuccess {
                self.data().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { PutSuccess::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn data_as_try_get(&self) -> Option<TryGet<'a>> {
            if self.data_type() == PacketData::TryGet {
                self.data().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { TryGet::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn data_as_get_success(&self) -> Option<GetSuccess<'a>> {
            if self.data_type() == PacketData::GetSuccess {
                self.data().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { GetSuccess::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn data_as_try_delete(&self) -> Option<TryDelete<'a>> {
            if self.data_type() == PacketData::TryDelete {
                self.data().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { TryDelete::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn data_as_delete_success(&self) -> Option<DeleteSuccess<'a>> {
            if self.data_type() == PacketData::DeleteSuccess {
                self.data().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { DeleteSuccess::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn data_as_error_response(&self) -> Option<ErrorResponse<'a>> {
            if self.data_type() == PacketData::ErrorResponse {
                self.data().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { ErrorResponse::init_from_table(t) }
                })
            } else {
                None
            }
        }
    }

    impl flatbuffers::Verifiable for Packet<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_union::<PacketData, _>(
                    "data_type",
                    Self::VT_DATA_TYPE,
                    "data",
                    Self::VT_DATA,
                    false,
                    |key, v, pos| match key {
                        PacketData::TryPut => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<TryPut>>(
                                "PacketData::TryPut",
                                pos,
                            ),
                        PacketData::PutSuccess => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<PutSuccess>>(
                                "PacketData::PutSuccess",
                                pos,
                            ),
                        PacketData::TryGet => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<TryGet>>(
                                "PacketData::TryGet",
                                pos,
                            ),
                        PacketData::GetSuccess => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<GetSuccess>>(
                                "PacketData::GetSuccess",
                                pos,
                            ),
                        PacketData::TryDelete => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<TryDelete>>(
                                "PacketData::TryDelete",
                                pos,
                            ),
                        PacketData::DeleteSuccess => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<DeleteSuccess>>(
                                "PacketData::DeleteSuccess",
                                pos,
                            ),
                        PacketData::ErrorResponse => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<ErrorResponse>>(
                                "PacketData::ErrorResponse",
                                pos,
                            ),
                        _ => Ok(()),
                    },
                )?
                .finish();
            Ok(())
        }
    }
    pub struct PacketArgs {
        pub data_type: PacketData,
        pub data: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    }
    impl<'a> Default for PacketArgs {
        #[inline]
        fn default() -> Self {
            PacketArgs {
                data_type: PacketData::NONE,
                data: None,
            }
        }
    }

    pub struct PacketBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> PacketBuilder<'a, 'b> {
        #[inline]
        pub fn add_data_type(&mut self, data_type: PacketData) {
            self.fbb_
                .push_slot::<PacketData>(Packet::VT_DATA_TYPE, data_type, PacketData::NONE);
        }
        #[inline]
        pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Packet::VT_DATA, data);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PacketBuilder<'a, 'b> {
            let start = _fbb.start_table();
            PacketBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Packet<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Packet<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Packet");
            ds.field("data_type", &self.data_type());
            match self.data_type() {
                PacketData::TryPut => {
                    if let Some(x) = self.data_as_try_put() {
                        ds.field("data", &x)
                    } else {
                        ds.field(
                            "data",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                PacketData::PutSuccess => {
                    if let Some(x) = self.data_as_put_success() {
                        ds.field("data", &x)
                    } else {
                        ds.field(
                            "data",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                PacketData::TryGet => {
                    if let Some(x) = self.data_as_try_get() {
                        ds.field("data", &x)
                    } else {
                        ds.field(
                            "data",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                PacketData::GetSuccess => {
                    if let Some(x) = self.data_as_get_success() {
                        ds.field("data", &x)
                    } else {
                        ds.field(
                            "data",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                PacketData::TryDelete => {
                    if let Some(x) = self.data_as_try_delete() {
                        ds.field("data", &x)
                    } else {
                        ds.field(
                            "data",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                PacketData::DeleteSuccess => {
                    if let Some(x) = self.data_as_delete_success() {
                        ds.field("data", &x)
                    } else {
                        ds.field(
                            "data",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                PacketData::ErrorResponse => {
                    if let Some(x) = self.data_as_error_response() {
                        ds.field("data", &x)
                    } else {
                        ds.field(
                            "data",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                _ => {
                    let x: Option<()> = None;
                    ds.field("data", &x)
                }
            };
            ds.finish()
        }
    }
    pub enum MessagesOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Messages<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Messages<'a> {
        type Inner = Messages<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Messages<'a> {
        pub const VT_VERSION: flatbuffers::VOffsetT = 4;
        pub const VT_PACKETS: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Messages { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args MessagesArgs<'args>,
        ) -> flatbuffers::WIPOffset<Messages<'bldr>> {
            let mut builder = MessagesBuilder::new(_fbb);
            if let Some(x) = args.packets {
                builder.add_packets(x);
            }
            builder.add_version(args.version);
            builder.finish()
        }

        #[inline]
        pub fn version(&self) -> i16 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<i16>(Messages::VT_VERSION, Some(0)).unwrap() }
        }
        #[inline]
        pub fn packets(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Packet<'a>>>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab.get::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Packet>>,
                >>(Messages::VT_PACKETS, None)
            }
        }
    }

    impl flatbuffers::Verifiable for Messages<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<i16>("version", Self::VT_VERSION, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Packet>>,
                >>("packets", Self::VT_PACKETS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct MessagesArgs<'a> {
        pub version: i16,
        pub packets: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Packet<'a>>>,
            >,
        >,
    }
    impl<'a> Default for MessagesArgs<'a> {
        #[inline]
        fn default() -> Self {
            MessagesArgs {
                version: 0,
                packets: None,
            }
        }
    }

    pub struct MessagesBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> MessagesBuilder<'a, 'b> {
        #[inline]
        pub fn add_version(&mut self, version: i16) {
            self.fbb_.push_slot::<i16>(Messages::VT_VERSION, version, 0);
        }
        #[inline]
        pub fn add_packets(
            &mut self,
            packets: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Packet<'b>>>,
            >,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Messages::VT_PACKETS, packets);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MessagesBuilder<'a, 'b> {
            let start = _fbb.start_table();
            MessagesBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Messages<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Messages<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Messages");
            ds.field("version", &self.version());
            ds.field("packets", &self.packets());
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `Messages`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_messages_unchecked`.
    pub fn root_as_messages(buf: &[u8]) -> Result<Messages, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<Messages>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `Messages` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_messages_unchecked`.
    pub fn size_prefixed_root_as_messages(
        buf: &[u8],
    ) -> Result<Messages, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<Messages>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `Messages` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_messages_unchecked`.
    pub fn root_as_messages_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Messages<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<Messages<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `Messages` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_messages_unchecked`.
    pub fn size_prefixed_root_as_messages_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Messages<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<Messages<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a Messages and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `Messages`.
    pub unsafe fn root_as_messages_unchecked(buf: &[u8]) -> Messages {
        flatbuffers::root_unchecked::<Messages>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed Messages and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `Messages`.
    pub unsafe fn size_prefixed_root_as_messages_unchecked(buf: &[u8]) -> Messages {
        flatbuffers::size_prefixed_root_unchecked::<Messages>(buf)
    }
    #[inline]
    pub fn finish_messages_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<Messages<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_messages_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<Messages<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod HexFlatbuffer
